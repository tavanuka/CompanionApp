@page "/"
@using System.Globalization
@using CompanionApp.Models

@inject NeutralBaseColor NeutralBaseColor
@inject IDimensionsService DimensionsService

<PageTitle>Calculator</PageTitle>
<div>
    <EditForm Model="@_calculation" OnValidSubmit="@OnValidSubmit">
        <FluentValidationValidator/>
        <FluentValidationSummary/>

        <FluentStack Orientation="Orientation.Vertical">
            <FluentNumberField @bind-Value="_calculation.NumberOfPoint"
                               HideStep="true">
                Number of points
            </FluentNumberField>
            <FluentNumberField @bind-Value="_calculation.Dimension"
                               HideStep="true">
                Dimension
                <FluentLabel slot="end" Typo="Typography.Body">mm</FluentLabel>
            </FluentNumberField>
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom">
                <FluentNumberField @bind-Value="@_calculation.MarginLeft" @bind-Value:after="@EvaluateMarginsLinked"
                                   Immediate="true"
                                   HideStep="true">
                    Left margin
                    <FluentLabel slot="end" Typo="Typography.Body">mm</FluentLabel>
                </FluentNumberField>
                <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => _linkMargins = !_linkMargins)" Title="Link margins">
                    <FluentIcon Value="@GetLinkButtonIcon()"></FluentIcon>
                </FluentButton>
                <FluentNumberField @bind-Value="@_calculation.MarginRight"
                                   HideStep="true"
                                   Immediate="true"
                                   Readonly="_linkMargins">
                    Right margin
                    <FluentLabel slot="end" Typo="Typography.Body">mm</FluentLabel>
                </FluentNumberField>
            </FluentStack>
            <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit">Calculate</FluentButton>
            <FluentDivider Style="width: 100%;" Role="DividerRole.Separator"/>
            <FluentCard @ref="_fluentCard" Class="result-card">
                @if (_resultVisible)
                {
                    <h2>Result: @_result.ToString(CultureInfo.CurrentCulture) cm</h2>
                }
                <p>
                    The calculation applies the following formula: <code>(dimension - (ml + mr)) / (points - 1)</code>
                    <br/>
                    Which in our case produces:
                    <code>
                        (@_calculation.Dimension.ToString(CultureInfo.CurrentCulture) mm - (@_calculation.MarginLeft.ToString(CultureInfo.CurrentCulture) mm + @_calculation.MarginRight.ToString(CultureInfo.CurrentCulture) mm)) / (@_calculation.NumberOfPoint.ToString() - 1)
                    </code>
                </p>
                <p>It calculates the gap between points needed for equally distributing drilling points. It also considers desired margins in return.</p>
                <p>
                    <i>If the number of points equal to one, the calculation will put it right in the middle with margins put in consideration:</i>
                    <code>(dimension - (ml + mr)) / 2</code>
                </p>
            </FluentCard>
        </FluentStack>
    </EditForm>
</div>

@code {
    private FluentCard _fluentCard = default!;
    private bool _linkMargins = true;
    private float _result;
    private bool _resultVisible;

    private Calculation _calculation = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NeutralBaseColor.SetValueFor(_fluentCard.Element, "#caba8c".ToSwatch());
        }
    }

    private Icon GetLinkButtonIcon() => _linkMargins
        ? new Icons.Regular.Size24.Link()
        : new Icons.Regular.Size24.LinkDismiss();

    private void OnValidSubmit()
    {
        _result = DimensionsService.CalculateGapInMillimeters(_calculation.Dimension, _calculation.MarginLeft, _calculation.MarginRight, _calculation.NumberOfPoint).ShiftDecimalPoint(1);
        _resultVisible = true;
    }

    private void EvaluateMarginsLinked()
    {
        if (_linkMargins)
        {
            _calculation.MarginRight = _calculation.MarginLeft;
        }
        StateHasChanged();
    }

}