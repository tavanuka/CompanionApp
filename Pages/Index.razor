@page "/"
@using System.Globalization

@inject DimensionsStore DimensionsStore
@inject NeutralBaseColor NeutralBaseColor

<PageTitle>Margin Calculator</PageTitle>
<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentNumberField TValue="int" @bind-Value="@DimensionsStore.PointsCount"
                           Immediate="true"
                           HideStep="true">
            Number of points
        </FluentNumberField>
        <FluentNumberField TValue="double" @bind-Value="@DimensionsStore.Dimension"
                           Immediate="true"
                           HideStep="true">
            Dimension
            <FluentLabel slot="end" Typo="Typography.Body">cm</FluentLabel>
        </FluentNumberField>
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom">
            <FluentNumberField TValue="double" @bind-Value="@_marginLeft" AfterBindValue="EvaluateMarginsLinked"
                               Immediate="true"
                               HideStep="true">
                Left margin
                <FluentLabel slot="end" Typo="Typography.Body">cm</FluentLabel>
            </FluentNumberField>
            <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => _linkMargins = !_linkMargins)">
                <FluentIcon Value="@GetLinkButtonIcon()"></FluentIcon>
            </FluentButton>
            <FluentNumberField TValue="@double" @bind-Value="@_marginRight" AfterBindValue="EvaluateMarginsLinked"
                               Immediate="true"
                               HideStep="true">
                Right margin
                <FluentLabel slot="end" Typo="Typography.Body">cm</FluentLabel>
            </FluentNumberField>

        </FluentStack>
        <FluentDivider Style="width: 100%;" Role="DividerRole.Separator"/>
        <FluentCard @ref="_fluentCard" Class="result-card">
            <h2>Result: @DimensionsStore.Gap.ToString(CultureInfo.CurrentCulture) cm</h2>
            <p>
                The calculation applies the following formula: <code>(dimension - (ml + mr)) / (points - 1)</code>
                <br/>
                Which in our case produces:
                <code>
                    (@DimensionsStore.Dimension.ToString(CultureInfo.CurrentCulture) - (@DimensionsStore.MarginLeft.ToString(CultureInfo.CurrentCulture) cm + @DimensionsStore.MarginRight.ToString(CultureInfo.CurrentCulture) cm)) / (@DimensionsStore.PointsCount.ToString() - 1)
                </code>
            </p>
            <p>It calculates the gap between points needed for equally distributing drilling points. It also considers desired margins in return.</p>

            <p>
                <i>If the number of points equal to one, the calculation will put it right in the middle with margins put in consideration:</i>
                <code>(dimension - (ml + mr)) / 2</code>
            </p>
        </FluentCard>
    </FluentStack>
</div>

@code {
    private FluentCard _fluentCard = default!;
    private bool _linkMargins = true;
    private double _marginLeft;
    private double _marginRight;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NeutralBaseColor.SetValueFor(_fluentCard.Element, new Swatch(202, 186, 140));
        }
    }

    private Icon GetLinkButtonIcon() => _linkMargins
        ? new Icons.Regular.Size24.Link()
        : new Icons.Regular.Size24.LinkDismiss();

    private void EvaluateMarginsLinked()
    {
        if (_linkMargins)
        {
            DimensionsStore.MarginLeft = _marginLeft;
            _marginRight = _marginLeft;
            DimensionsStore.MarginRight = _marginLeft;
        }
        else
        {
            DimensionsStore.MarginLeft = _marginLeft;
            DimensionsStore.MarginRight = _marginRight;
        }
        StateHasChanged();
    }

}